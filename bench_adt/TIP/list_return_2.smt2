(declare-sort sk_a 0)
(declare-sort fun1 0)
(declare-datatypes ()
  ((list (nil) (cons (head sk_a) (tail list)))))
(declare-const lam fun1)
(declare-fun apply1 (fun1 sk_a) list)
(declare-fun return (sk_a) list)
(declare-fun append (list list) list)
(declare-fun bind (list fun1) list)
(assert (not (forall ((xs list)) (= (bind xs lam) xs))))
(assert (forall ((x sk_a)) (= (return x) (cons x nil))))
(assert
  (forall ((x list) (y list))
    (= (append x y)
      (ite (is-cons x) (cons (head x) (append (tail x) y)) y))))
(assert
  (forall ((x list) (y fun1))
    (= (bind x y)
      (ite
        (is-cons x) (append (apply1 y (head x)) (bind (tail x) y)) nil))))
(assert (forall ((x sk_a)) (= (apply1 lam x) (return x))))
(check-sat)
